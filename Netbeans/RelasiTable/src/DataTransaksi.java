/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author User
 */
import java.sql.Connection;
import java.sql.Statement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.text.SimpleDateFormat;
import java.util.Date;
import com.toedter.calendar.JCalendar;
import com.toedter.components.JSpinField;
import java.util.Calendar;
import java.sql.SQLException;

public class DataTransaksi extends javax.swing.JFrame {
    // Hanya deklarasikan variabel non-GUI
    private Connection koneksi;
    private DefaultTableModel tabmode;

    /** Creates new form DataTransaksi */
    public DataTransaksi() {
        initComponents();
        koneksi = Koneksi.getKoneksi();
        
        // Debug: cek koneksi database
        if (koneksi != null) {
            System.out.println("Database terhubung");
            cekData(); // Tambahkan ini untuk debug
        } else {
            System.out.println("Database tidak terhubung");
        }
        
        // Set field yang readonly
        jTextField1.setEditable(false);     // kode barang readonly
        jTextField3.setEditable(false);     // nama barang readonly
        jTextField4.setEditable(false);     // harga barang readonly
        jTextField5.setEditable(false);     // qty readonly
        jTextField6.setEditable(false);     // nama pelanggan readonly
        
        // Inisialisasi ComboBox
        initComboBox();
        
        // Tambahkan event listener untuk combobox setelah inisialisasi
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                if (jComboBox1.getSelectedItem() != null) {
                    ambilData();
                }
            }
        });
        
        jComboBox2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED && 
                    jComboBox2.getSelectedItem() != null) {
                    updateNamaPelanggan();
                }
            }
        });
        
        // Add key listener untuk kode barang
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
                    cariBarang();
                }
            }
        });
        
        tampildata();
        
        // Set tanggal hari ini
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        jTextField2.setText(sdf.format(new Date()));
        
        // Add event listeners untuk button
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kosongkanForm();
            }
        });
        
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simpanData();
            }
        });
        
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateData();
            }
        });
        
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hapusData();
            }
        });

        // Add MouseListener untuk jTable2
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox2 = new javax.swing.JComboBox<>();
        jButton2 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jTextField6 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jTextField4 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jComboBox2.setEditable(true);
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox2ItemStateChanged(evt);
            }
        });
        jComboBox2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jComboBox2KeyReleased(evt);
            }
        });

        jButton2.setText("SAVE");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel8.setText("Nama Pelanggan");

        jTextField5.setText("jTextField1");

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable2);

        jTextField6.setText("jTextField1");

        jButton1.setText("RESET");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton4.setText("DELETE");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jTextField1.setText("jTextField1");

        jTextField3.setText("jTextField1");

        jLabel9.setText("Tanggal");

        jLabel6.setText("Kuantitas");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("DATA TRANSAKSI");

        jLabel7.setText("Kode Pelanggan");

        jButton3.setText("EDIT");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTextField4.setText("jTextField1");

        jLabel2.setText("NO.FAKTUR");

        jLabel5.setText("Nama Barang");

        jLabel3.setText("Kode Barang");

        jComboBox1.setEditable(true);
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });
        jComboBox1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jComboBox1KeyReleased(evt);
            }
        });

        jLabel4.setText("Harga Barang");

        jTextField2.setText("jTextField2");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(79, 79, 79)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton4))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel2)
                                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel4)
                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jTextField2))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel7)
                                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton2)
                            .addComponent(jButton3)
                            .addComponent(jButton4)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(38, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox2ItemStateChanged
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            cariPelanggan();
        }
    }//GEN-LAST:event_jComboBox2ItemStateChanged

    private void jComboBox2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBox2KeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox2KeyReleased

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {
        simpanData();
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
        kosongkanForm();
    }

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {
        hapusData();
    }

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {
        updateData();
    }

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            cariFaktur();
        }
    }//GEN-LAST:event_jComboBox1ItemStateChanged

    private void jComboBox1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBox1KeyReleased
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            cariBarang();
        }
    }//GEN-LAST:event_jComboBox1KeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DataTransaksi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DataTransaksi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DataTransaksi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DataTransaksi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DataTransaksi().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    // End of variables declaration//GEN-END:variables

    private void initComboBox() {
        // Inisialisasi ComboBox dengan item default
        jComboBox1.addItem("-- Pilih No Faktur --");
        jComboBox2.addItem("-- Pilih Kode Pelanggan --");
        
        // Load data
        loadFaktur();
        loadKodePelanggan();
    }
    
    private void loadFaktur() {
        try {
            jComboBox1.removeAllItems();
            jComboBox1.addItem("- Pilih No Faktur -");
            
            Statement stat = koneksi.createStatement();
            // Ambil no_faktur dari tb_detail yang belum ada di tb_transaksi
            String sql = "SELECT DISTINCT d.no_faktur FROM tb_detail d " +
                        "WHERE d.no_faktur NOT IN (SELECT no_faktur FROM tb_transaksi) " +
                        "ORDER BY d.no_faktur";
            ResultSet rs = stat.executeQuery(sql);
            
            while (rs.next()) {
                jComboBox1.addItem(rs.getString("no_faktur"));
            }
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error memuat nomor faktur: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    private void loadKodePelanggan() {
        try {
            jComboBox2.removeAllItems();
            jComboBox2.addItem("-- Pilih Kode Pelanggan --");
            
            String sql = "SELECT kode_pelanggan, nama FROM tb_pelanggang";
            Statement stmt = koneksi.createStatement();
            ResultSet rs = stmt.executeQuery(sql);
            
            while (rs.next()) {
                String kode = rs.getString("kode_pelanggan");
                String nama = rs.getString("nama");
                jComboBox2.addItem(kode + " - " + nama);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error loading pelanggan: " + e.getMessage());
        }
    }
    
    private void kosongkanForm() {
        jTextField1.setText("");
        jTextField2.setText("");
        jTextField3.setText("");
        jTextField4.setText("");
        jTextField5.setText("");
        jTextField6.setText("");
        jComboBox2.setSelectedIndex(0);
        
        // Set tanggal hari ini
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        jTextField2.setText(sdf.format(new Date()));
    }
    
    private void resetForm() {
        // Method baru untuk reset total termasuk ComboBox
        if (jComboBox1.getItemCount() > 0) {
            jComboBox1.setSelectedIndex(0);
        }
        if (jComboBox2.getItemCount() > 0) {
            jComboBox2.setSelectedIndex(0);
        }
        kosongkanForm();
    }
    
    private void cariFaktur() {
        if (jComboBox1.getSelectedIndex() > 0) {
            try {
                String noFaktur = jComboBox1.getSelectedItem().toString();
                
                // Query untuk mengambil data dari tb_detail
                String sql = "SELECT t.tgl, t.kode_pelanggan, p.nama as nama_pelanggan, " +
                           "d.kode_barang, b.nama_barang, b.harga_barang, d.qty " +
                           "FROM tb_detail d " +
                           "JOIN tb_transaksi t ON d.no_faktur = t.no_faktur " +
                           "JOIN tb_pelanggang p ON t.kode_pelanggan = p.kode_pelanggan " +
                           "JOIN tb_barang b ON d.kode_barang = b.kode_barang " +
                           "WHERE d.no_faktur = ?";
                           
                PreparedStatement ps = koneksi.prepareStatement(sql);
                ps.setString(1, noFaktur);
                ResultSet rs = ps.executeQuery();
                
                if (rs.next()) {
                    // Set tanggal
                    jTextField2.setText(rs.getString("tgl"));
                    
                    // Set pelanggan
                    String kodePelanggan = rs.getString("kode_pelanggan");
                    String namaPelanggan = rs.getString("nama_pelanggan");
                    for (int i = 0; i < jComboBox2.getItemCount(); i++) {
                        if (jComboBox2.getItemAt(i).toString().startsWith(kodePelanggan)) {
                            jComboBox2.setSelectedIndex(i);
                            break;
                        }
                    }
                    jTextField3.setText(namaPelanggan);
                    
                    // Set barang
                    String kodeBarang = rs.getString("kode_barang");
                    String namaBarang = rs.getString("nama_barang");
                    for (int i = 0; i < jComboBox1.getItemCount(); i++) {
                        if (jComboBox1.getItemAt(i).toString().startsWith(kodeBarang)) {
                            jComboBox1.setSelectedIndex(i);
                            break;
                        }
                    }
                    jTextField4.setText(namaBarang);
                    jTextField6.setText(rs.getString("harga_barang"));
                    jTextField5.setText(rs.getString("qty"));
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error mencari faktur: " + e.getMessage());
            }
        } else {
            kosongkanForm();
        }
    }
    
    private void cariPelanggan() {
        if (jComboBox2.getSelectedIndex() > 0) {
            try {
                String kodePelanggan = jComboBox2.getSelectedItem().toString().split(" - ")[0];
                String sql = "SELECT nama FROM tb_pelanggang WHERE kode_pelanggan = ?";
                PreparedStatement ps = koneksi.prepareStatement(sql);
                ps.setString(1, kodePelanggan);
                ResultSet rs = ps.executeQuery();
                
                if (rs.next()) {
                    jTextField6.setText(rs.getString("nama"));
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error mencari pelanggan: " + e.getMessage());
            }
        } else {
            jTextField6.setText("");
        }
    }
    
    private void tampildata() {
        Object[] baris = {"No Faktur", "Tanggal", "Kode Pelanggan", "Nama Pelanggan", 
                         "Kode Barang", "Nama Barang", "Harga", "Qty"};
        tabmode = new DefaultTableModel(null, baris);
        jTable2.setModel(tabmode);
        
        try {
            String sql = "SELECT t.no_faktur, t.tgl, t.kode_pelanggan, p.nama as nama_pelanggan, " +
                        "d.kode_barang, b.nama_barang, b.harga_barang, d.qty " +
                        "FROM tb_transaksi t " +
                        "JOIN tb_detail d ON t.no_faktur = d.no_faktur " +
                        "JOIN tb_barang b ON d.kode_barang = b.kode_barang " +
                        "JOIN tb_pelanggang p ON t.kode_pelanggan = p.kode_pelanggan " +
                        "ORDER BY t.no_faktur";
                        
            Statement stat = koneksi.createStatement();
            ResultSet rs = stat.executeQuery(sql);
            
            while (rs.next()) {
                String[] data = {
                    rs.getString("no_faktur"),
                    rs.getString("tgl"),
                    rs.getString("kode_pelanggan"),
                    rs.getString("nama_pelanggan"),
                    rs.getString("kode_barang"),
                    rs.getString("nama_barang"),
                    rs.getString("harga_barang"),
                    rs.getString("qty")
                };
                tabmode.addRow(data);
            }
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error menampilkan data: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    private boolean validasiInput() {
        if (jTextField2.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Tanggal harus diisi!");
            return false;
        }
        if (jComboBox2.getSelectedIndex() <= 0) {
            JOptionPane.showMessageDialog(this, "Pilih Kode Pelanggan!");
            return false;
        }
        return true;
    }
    
    private void updateData() {
        try {
            int row = jTable2.getSelectedRow();
            if (row == -1) {
                JOptionPane.showMessageDialog(this, "Pilih data yang akan diupdate dari tabel!");
                return;
            }
            
            if (jComboBox2.getSelectedIndex() == 0) {
                JOptionPane.showMessageDialog(this, "Pilih pelanggan terlebih dahulu!");
                return;
            }
            
            String noFaktur = jTable2.getValueAt(row, 0).toString();
            
            // Update data di tb_transaksi
            String sql = "UPDATE tb_transaksi SET tgl = ?, kode_pelanggan = ? WHERE no_faktur = ?";
            PreparedStatement ps = koneksi.prepareStatement(sql);
            ps.setString(1, jTextField2.getText().trim());
            String kodePelanggan = jComboBox2.getSelectedItem().toString().split(" - ")[0];
            ps.setString(2, kodePelanggan);
            ps.setString(3, noFaktur);
            
            int result = ps.executeUpdate();
            
            if (result > 0) {
                JOptionPane.showMessageDialog(this, "Data berhasil diupdate!");
                tampildata();
                kosongkanForm();
            }
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error mengupdate data: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    private void hapusData() {
        try {
            int row = jTable2.getSelectedRow();
            if (row == -1) {
                JOptionPane.showMessageDialog(this, "Pilih data yang akan dihapus dari tabel!");
                return;
            }
            
            String noFaktur = jTable2.getValueAt(row, 0).toString();
            
            int konfirmasi = JOptionPane.showConfirmDialog(this, 
                "Apakah anda yakin ingin menghapus data ini?", 
                "Konfirmasi", 
                JOptionPane.YES_NO_OPTION);
                
            if (konfirmasi == JOptionPane.YES_OPTION) {
                String sql = "DELETE FROM tb_transaksi WHERE no_faktur = ?";
                PreparedStatement ps = koneksi.prepareStatement(sql);
                ps.setString(1, noFaktur);
                
                int result = ps.executeUpdate();
                
                if (result > 0) {
                    JOptionPane.showMessageDialog(this, "Data berhasil dihapus!");
                    loadFaktur();
                    tampildata();
                    kosongkanForm();
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error menghapus data: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private String generateNoFaktur() {
        try {
            Statement stat = koneksi.createStatement();
            // Mengambil nomor faktur terakhir dari tb_detail
            String sql = "SELECT MAX(no_faktur) as last_faktur FROM tb_detail";
            ResultSet rs = stat.executeQuery(sql);
            
            if (rs.next()) {
                String lastFaktur = rs.getString("last_faktur");
                if (lastFaktur == null) {
                    return "TRX001";
                }
                
                int lastNum = Integer.parseInt(lastFaktur.substring(3));
                String newNum = String.format("%03d", lastNum + 1);
                return "TRX" + newNum;
            }
            
            return "TRX001";
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error generating nomor faktur: " + e.getMessage());
            return null;
        }
    }

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {
        try {
            int row = jTable2.getSelectedRow();
            if (row == -1) return;
            
            String noFaktur = jTable2.getValueAt(row, 0).toString();
            
            String sql = "SELECT t.no_faktur, t.tgl, t.kode_pelanggan, p.nama as nama_pelanggan, " +
                        "d.kode_barang, b.nama_barang, b.harga_barang, d.qty " +
                        "FROM tb_transaksi t " +
                        "JOIN tb_detail d ON t.no_faktur = d.no_faktur " +
                        "JOIN tb_barang b ON d.kode_barang = b.kode_barang " +
                        "JOIN tb_pelanggang p ON t.kode_pelanggan = p.kode_pelanggan " +
                        "WHERE t.no_faktur = ?";
                        
            PreparedStatement ps = koneksi.prepareStatement(sql);
            ps.setString(1, noFaktur);
            ResultSet rs = ps.executeQuery();
            
            if (rs.next()) {
                jTextField1.setText(rs.getString("kode_barang"));
                jTextField2.setText(rs.getString("tgl"));
                jTextField3.setText(rs.getString("nama_barang"));
                jTextField4.setText(rs.getString("harga_barang"));
                jTextField5.setText(rs.getString("qty"));
                jTextField6.setText(rs.getString("nama_pelanggan"));
                
                String kodePelanggan = rs.getString("kode_pelanggan");
                for (int i = 0; i < jComboBox2.getItemCount(); i++) {
                    if (jComboBox2.getItemAt(i).toString().startsWith(kodePelanggan)) {
                        jComboBox2.setSelectedIndex(i);
                        break;
                    }
                }
            }
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error mengambil data: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void ambilData() {
        try {
            if (jComboBox1.getSelectedItem() == null || 
                jComboBox1.getSelectedItem().toString().equals("- Pilih No Faktur -")) {
                kosongkanForm();
                return;
            }
            
            String noFaktur = jComboBox1.getSelectedItem().toString();
            
            // Ambil data dari tb_detail dan tb_barang
            String sql = "SELECT d.no_faktur, d.kode_barang, d.qty, " +
                        "b.nama_barang, b.harga_barang " +
                        "FROM tb_detail d " +
                        "JOIN tb_barang b ON d.kode_barang = b.kode_barang " +
                        "WHERE d.no_faktur = ?";
                        
            PreparedStatement ps = koneksi.prepareStatement(sql);
            ps.setString(1, noFaktur);
            ResultSet rs = ps.executeQuery();
            
            if (rs.next()) {
                // Set data barang
                jTextField1.setText(rs.getString("kode_barang"));
                jTextField3.setText(rs.getString("nama_barang"));
                jTextField4.setText(rs.getString("harga_barang"));
                jTextField5.setText(rs.getString("qty"));
                
                // Set tanggal hari ini
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                jTextField2.setText(sdf.format(new Date()));
                
                // Reset pelanggan
                jComboBox2.setSelectedIndex(0);
                jTextField6.setText("");
            }
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error mengambil data: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void simpanData() {
        if (!validasiInput()) {
            return;
        }
        
        if (jComboBox1.getSelectedItem() == null || 
            jComboBox1.getSelectedItem().toString().equals("- Pilih No Faktur -")) {
            JOptionPane.showMessageDialog(this, "Pilih nomor faktur terlebih dahulu!");
            return;
        }
        
        if (jComboBox2.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(this, "Pilih pelanggan terlebih dahulu!");
            return;
        }
        
        Connection conn = null;
        try {
            conn = koneksi;
            conn.setAutoCommit(false);
            
            String noFaktur = jComboBox1.getSelectedItem().toString();
            
            // Cek apakah no_faktur sudah ada di tb_transaksi
            String sqlCheck = "SELECT no_faktur FROM tb_transaksi WHERE no_faktur = ?";
            PreparedStatement psCheck = conn.prepareStatement(sqlCheck);
            psCheck.setString(1, noFaktur);
            ResultSet rsCheck = psCheck.executeQuery();
            
            if (rsCheck.next()) {
                JOptionPane.showMessageDialog(this, "No Faktur sudah ada di transaksi!");
                return;
            }
            
            // Simpan ke tb_transaksi
            String sqlTransaksi = "INSERT INTO tb_transaksi (no_faktur, tgl, kode_pelanggan) VALUES (?, ?, ?)";
            PreparedStatement psTransaksi = conn.prepareStatement(sqlTransaksi);
            psTransaksi.setString(1, noFaktur);
            psTransaksi.setString(2, jTextField2.getText().trim());
            String kodePelanggan = jComboBox2.getSelectedItem().toString().split(" - ")[0];
            psTransaksi.setString(3, kodePelanggan);
            psTransaksi.executeUpdate();
            
            conn.commit();
            
            JOptionPane.showMessageDialog(this, "Data transaksi berhasil disimpan!");
            loadFaktur(); // Reload combobox no_faktur
            tampildata(); // Tampilkan data setelah disimpan
            kosongkanForm();
            
        } catch (Exception e) {
            try {
                if (conn != null) conn.rollback();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
            JOptionPane.showMessageDialog(this, "Gagal menyimpan: " + e.getMessage());
            e.printStackTrace();
        } finally {
            try {
                if (conn != null) conn.setAutoCommit(true);
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
    }

    private void cariBarang() {
        try {
            String kodeBarang = jTextField1.getText().trim();
            String sql = "SELECT nama_barang, harga_barang FROM tb_barang WHERE kode_barang = ?";
            PreparedStatement ps = koneksi.prepareStatement(sql);
            ps.setString(1, kodeBarang);
            ResultSet rs = ps.executeQuery();
            
            if (rs.next()) {
                jTextField3.setText(rs.getString("nama_barang"));     // nama barang
                jTextField4.setText(rs.getString("harga_barang"));    // harga barang
            } else {
                jTextField3.setText("");
                jTextField4.setText("");
                JOptionPane.showMessageDialog(this, "Kode barang tidak ditemukan!");
            }
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error mencari barang: " + e.getMessage());
        }
    }

    private void updateNamaPelanggan() {
        try {
            if (jComboBox2.getSelectedItem().toString().equals("- Pilih Pelanggan -")) {
                jTextField6.setText("");
                return;
            }
            
            String kodePelanggan = jComboBox2.getSelectedItem().toString().split(" - ")[0];
            String sql = "SELECT nama FROM tb_pelanggang WHERE kode_pelanggan = ?";
            PreparedStatement ps = koneksi.prepareStatement(sql);
            ps.setString(1, kodePelanggan);
            ResultSet rs = ps.executeQuery();
            
            if (rs.next()) {
                jTextField6.setText(rs.getString("nama"));
            }
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error mengambil nama pelanggan: " + e.getMessage());
            e.printStackTrace();
        }
    }

    // Tambahkan method untuk mengecek data
    private void cekData() {
        try {
            Statement stat = koneksi.createStatement();
            
            // Cek data di tb_detail
            ResultSet rsDetail = stat.executeQuery("SELECT COUNT(*) as total FROM tb_detail");
            if (rsDetail.next()) {
                System.out.println("Jumlah data di tb_detail: " + rsDetail.getInt("total"));
            }
            
            // Cek data di tb_transaksi
            ResultSet rsTransaksi = stat.executeQuery("SELECT COUNT(*) as total FROM tb_transaksi");
            if (rsTransaksi.next()) {
                System.out.println("Jumlah data di tb_transaksi: " + rsTransaksi.getInt("total"));
            }
            
            // Cek join data
            ResultSet rsJoin = stat.executeQuery(
                "SELECT COUNT(*) as total FROM tb_detail d " +
                "INNER JOIN tb_transaksi t ON d.no_faktur = t.no_faktur"
            );
            if (rsJoin.next()) {
                System.out.println("Jumlah data join: " + rsJoin.getInt("total"));
            }
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
